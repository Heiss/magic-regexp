var searchIndex = JSON.parse('{\
"magic_regexp":{"doc":"This crate provides a library for creating regular …","t":[8,13,13,8,13,4,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,6,13,13,13,4,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AsRegex","CarriageReturn","Char","Condition","Digit","Error","Exactly","Input","Letter","LetterLowercase","LetterUppercase","Linefeed","Maybe","NotCarriageReturn","NotDigit","NotLetter","NotLetterLowercase","NotLetterUppercase","NotLinefeed","NotTab","NotWhitespace","NotWordBoundary","NotWordChar","OneOrMore","Options","RegexError","Result","Tab","Text","Times","Type","Whitespace","Word","WordBoundary","WordChar","and","and","as","as_regex","as_regex","as_regex","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","create_reg_exp","fmt","fmt","from","from","from","from","grouped","grouped_as","into","into","into","not","optionally","optionally","or","or","provide","source","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["magic_regexp","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A trait, which allows to convert something to a regex. …","","","A trait, which allows to chain regex statements with …","","An error, which can occur while using this crate. Mostly …","","This is a regex input that can be used to match a single …","","","","","","","","","","","","","","","","","","","A type, which is used to return results from this crate. …","","","","Represents a regex type. This enum is used to create the …","","","","","Returns the regex, which chains the two given statements …","Returns the regex, which chains the two given statements …","This defines the entire input so far as a named capture …","Returns the regex, which represents the wanted statement.","Returns the regex, which represents the wanted statement.","","","","","","","","Returns the regex, which represents the given statement. …","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","This defines the entire input so far as an anonymous group.","This defines the entire input so far as a named capture …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the opposite of the given type. For example, …","Returns the regex, which sets the given statement to …","Returns the regex, which sets the given statement to …","Returns the regex, which chains the two given statements …","Returns the regex, which chains the two given statements …","","","","Returns a string representation of the input. For example, …","","","","","","","","","",""],"i":[0,10,10,0,10,0,3,0,10,10,10,10,3,10,10,10,10,10,10,10,10,10,10,3,10,6,0,10,10,3,0,10,10,10,10,17,17,3,1,1,3,10,3,6,10,3,6,0,6,6,10,3,6,6,3,3,10,3,6,0,17,17,17,17,6,6,10,3,6,10,3,6,10,3,6,10,3,6],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[1,2],[[3,4],2],[[],[[5,[2]]]],[[],[[5,[2]]]],[3,[[5,[2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[1,[[5,[2]]]],[[6,7],8],[[6,7],8],[[]],[[]],[9,6],[[]],[3,2],[[3,4],2],[[]],[[]],[[]],[10,10],[[],2],[[],2],[1,2],[1,2],[11],[6,[[13,[12]]]],[10,14],[3,14],[[],14],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16]],"p":[[8,"AsRegex"],[3,"Regex"],[4,"Input"],[15,"str"],[6,"Result"],[4,"Error"],[3,"Formatter"],[6,"Result"],[4,"Error"],[4,"Type"],[3,"Demand"],[8,"Error"],[4,"Option"],[3,"String"],[4,"Result"],[3,"TypeId"],[8,"Condition"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
